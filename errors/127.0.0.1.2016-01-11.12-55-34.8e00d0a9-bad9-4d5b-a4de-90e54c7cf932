(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> long() argument must be a string or a number, not 'NoneType'"
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/naturar/controllers/compuestos.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\nfrom rdkit.Chem import AllChem\nimport os.path \n\n#~ def list_molecules():\n    #~ """\n    #~ show compound like a image grid\n    #~ """\n    #~ if len(request.args): page=int(request.args[0])\n    #~ else: page=0\n    #~ items_per_page=5\n    #~ limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    #~ rows=db().select(db.compound_record.ALL,limitby=limitby)\n    #~ return dict(rows=rows,page=page,items_per_page=items_per_page)\n\n\ndef list_molecules2():\n    grid = SQLFORM.smartgrid(db.compound_record, paginate=5)\n    return locals()\n\n#~ @auth.requires_membership(\'managers\')\ndef buscar():\n    """\n    action to show a list of compounds\n    """\n    imagewidth = 70\n    imageheight = 70\n    request.is_local =False\n    #extract of http://stackoverflow.com/questions/21447804/web2py-sqlform-grid-edit-page\n    db.compound_record.id.readable = False\n    db.compound_record.id.writeable = False\n \n\n    form = SQLFORM.grid(\n        query=db.compound_record,\n        formname="compound",\n        editable = auth.has_membership(\'managers\'),\n        deletable = auth.has_membership(\'managers\'),\n        buttons_placement = \'left\',\n        paginate = 5,\n        searchable= dict(smiles=True, extract=False),\n        links=[dict(header=T(\'Image\'), body = lambda row: \n        DIV(A(IMG(_src=URL(\'static\',row.imagepath), \n        _width=imagewidth, _height=imageheight),_href="localhost"),_class="img-zoom"))])\n        \n   \n   \n    #if "view" in request.args(0)request.env.request_uri:\n    #~ try:\n    if request.args(0):\n        if "view" in request.args(0):\n            record_id = form.view_form.record_id \n            # Properties selection\n            table = db(db.compound_property.compound_record_id==record_id).select(\n                db.compound_property.molecular_weight,\n                db.compound_property.molecular_formula,\n                db.compound_property.molecular_volume,\n                db.compound_property.smiles,\n                db.compound_property.clogp,\n                db.compound_property.xlogp,\n                db.compound_property.tpsa,\n                db.compound_property.hbd,\n                db.compound_property.hba,\n                db.compound_property.num_rotatables_bonds,\n                db.compound_property.aromatic_rings,\n                db.compound_property.num_n,\n                db.compound_property.num_o,\n                db.compound_property.num_s,\n                db.compound_property.num_ro5_violations,\n            )        \n            properties = rows_transpose(table)\n            \n            docs_id = db(db.compound_record.id==record_id).select(db.compound_record.docs)\n            print docs_id\n            \n            docs = docs_id\n            print type(docs)\n            print "hola"\n            print docs_id.as_list()\n            \n            \n            a = db(db.doc.id.belongs(docs_id)).select()\n            print a\n            \n            #~ # Docs selection\n            #~ table = db(db.doc.id==docs).select(\n            #~ table = db(db(db.compound_record.id==record_id).select(db.compound_record.docs)).select(\n                #~ db.doc.journal,\n                #~ db.doc.year,\n                #~ db.doc.volume,\n                #~ db.doc.issue,\n                #~ db.doc.first_page,\n                #~ db.doc.last_page,\n                #~ db.doc.doi,\n                #~ db.doc.pubmed_id,\n                #~ db.doc.title,\n                #~ db.doc.doc_type,\n                #~ db.doc.authors,\n                #~ db.doc.abstract,\n            #~ )\n            print docs.split("|")\n            \n            for row in docs:\n                print row.split("|")\n                print db(db.doc.id.belongs(row)).select()\n            #~ for row in db(db.doc.id.belongs(docs)).select():\n                #~ print row.event\n            \n            docs = rows_transpose(table)\n\n\n            \n    else:\n        properties = ""\n        docs = ""\n\n    \n    return dict(form=form, properties=properties, docs=docs)\n    \ndef buscar2():\n    """\n    action to show a list of compounds\n    """\n    imagewidth = 70\n    imageheight = 70\n    request.is_local =False\n    #extract of http://stackoverflow.com/questions/21447804/web2py-sqlform-grid-edit-page\n    db.compound_record.id.readable = False\n    db.compound_record.id.writeable = False\n \n\n    form = SQLFORM.smartgrid(db.compound_record,\n        #~ left=db.extract_record.extract_name(db.extract_record.id==db.compound_record.extract),\n        editable = auth.has_membership(\'managers\'),\n        deletable = auth.has_membership(\'managers\'),\n        buttons_placement = \'left\',\n        paginate = 5,\n        searchable= dict(smiles=True, extract=False),\n        #~ links=[dict(header=T(\'Image\'), body = lambda row: \n        #~ DIV(A(IMG(_src=URL(\'static\',row.imagepath), \n        #~ _width=imagewidth, _height=imageheight),_href="localhost"),_class="img-zoom"))]\n        )\n               \n\n    print calculate_descriptors("NN")\n   \n    return dict(form=form)    \n    \n\ndef custom_search():\n    \'\'\'\n    Implements SQLFORM.grid custom search \n        WITHOUT specifying a custom search_widget,\n            and so needing to read & understand the clever web2py implementation source code.\n    The custom_search.html view contains the EASIER TO UNDERSTAND customization code.\n    The technique:\n        1. Make the grid\'s Standard Search Input hidden.\n        2. Define Custom Search Input elements \n            with onchange events that \n                send their values to the to the hidden Standard Search Input.\n    \'\'\'\n    query=((db.compound_record.id > 0))\n    fields = (db.compound_record.id, \n        db.compound_record.smiles, \n        db.compound_record.name, \n        )\n \n    headers = {\'compound_record.id\':   \'ID\',\n           \'compound_record.smiles\': \'Last Name\',\n           \'db.compound_record.name\': \'Primary Phone\',\n           }    \n    init_sort_order=[db.compound_record.name]   \n \n    grid = SQLFORM.grid(query=query, \n        fields=fields, \n        headers=headers, \n        orderby=init_sort_order,\n        searchable=True,  \n        user_signature=False, \n        create=True, deletable=False, editable=True, maxtextlength=100, paginate=25)\n \n    return dict(grid=grid)  \n\n\n\n\ndef manage_packages():\n    if request.args(0) == \'new\' and request.args(1) == \'compound_record\':\n\n        # (1) Get available docs\n        docs = [(r.id, r.title) for r in db(db.doc).select()]\n        print docs\n\n        # (2) Build the form\n        form = SQLFORM.factory(\n            db.compound_record,\n            Field(\'doc\',\n                requires=IS_IN_SET(docs, multiple=True)\n            )\n        )\n\n        # (3) Validate form data\n        if form.process().accepted:\n\n            # (4) Insert compound\n            compound_id = db.compound_record.insert(\n                **db.compound_record._filter_fields(form.vars))\n\n            if compound_id and form.vars.docs:\n\n                # (5) Insert component package associations\n                for doc_id in form.vars.docs:\n                    existing_doc = db.doc(doc_id)\n\n                    if existing_doc:\n                        db.r_compound_doc.insert(\n                            compound_id=compound_id,\n                            doc_id=existing_doc\n                        )\n\n                response.flash = \'Package has been created successfully.\'\n\n        content = form\n    else:\n        content = SQLFORM.grid(db.compound_record)\n\n    return dict(content=content)\n\n\n\nresponse._vars=response._caller(buscar)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/naturar/controllers/compuestos.py", line 241, in <module>\n  File "/home/www-data/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/www-data/web2py/applications/naturar/controllers/compuestos.py", line 92, in buscar\n    a = db(db.doc.id.belongs(docs_id)).select()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 1986, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1245, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1132, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 916, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 762, in BELONGS\n    items = \',\'.join(self.expand(item, first.type) for item in second)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 762, in <genexpr>\n    items = \',\'.join(self.expand(item, first.type) for item in second)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 926, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 328, in represent\n    return BaseAdapter.represent(self, obj, fieldtype)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1394, in represent\n    return str(long(obj))\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/objects.py", line 82, in <lambda>\n    __long__ = lambda self: long(self.get(\'id\'))\nTypeError: long() argument must be a string or a number, not \'NoneType\'\n'
p11
s.