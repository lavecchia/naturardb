(dp1
S'output'
p2
S'<class \'gluon.contrib.pg8000.ProgrammingError\'> (\'ERROR\', \'23505\', \'duplicate key value violates unique constraint "compoundsubmission_pkey"\')'
p3
sS'layer'
p4
S'/mnt/web2py/applications/naturardb/controllers/compuestos.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\nfrom rdkit.Chem import AllChem\nimport os.path \n\n#~ def list_molecules():\n    #~ """\n    #~ show compound like a image grid\n    #~ """\n    #~ if len(request.args): page=int(request.args[0])\n    #~ else: page=0\n    #~ items_per_page=5\n    #~ limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    #~ rows=db().select(db.compound.ALL,limitby=limitby)\n    #~ return dict(rows=rows,page=page,items_per_page=items_per_page)\n\n\ndef list_molecules2():\n    grid = SQLFORM.smartgrid(db.compound, paginate=5)\n    return locals()\n\n#~ @auth.requires_membership(\'managers\')\ndef buscar():\n    """\n    action to show a list of compounds\n    """\n    imagewidth = 70\n    imageheight = 70\n    request.is_local =False\n    #extract of http://stackoverflow.com/questions/21447804/web2py-sqlform-grid-edit-page\n    db.compound.id.readable = False\n    db.compound.id.writeable = False\n \n\n    form = SQLFORM.grid(\n        query=db.compound,\n        formname="compound",\n        editable = auth.has_membership(\'managers\'),\n        deletable = auth.has_membership(\'managers\'),\n        buttons_placement = \'left\',\n        paginate = 5,\n        searchable= dict(smiles=True, extract=False),\n        links=[dict(header=T(\'Image\'), body = lambda row: \n        DIV(A(IMG(_src=URL(\'static\',row.imagepath), \n        _width=imagewidth, _height=imageheight),_href="localhost"),_class="img-zoom"))])\n        \n   \n   \n    #if "view" in request.args(0)request.env.request_uri:\n    #~ try:\n    if request.args(0):\n        if "view" in request.args(0):\n            record_id = form.view_form.record_id \n            # Properties selection\n            table = db(db.compound_property.compound_id==record_id).select(\n                db.compoundproperty.molecular_weight,\n                db.compoundproperty.molecular_formula,\n                db.compoundproperty.molecular_volume,\n                db.compoundproperty.smiles,\n                db.compoundproperty.clogp,\n                db.compoundproperty.xlogp,\n                db.compoundproperty.tpsa,\n                db.compoundproperty.hbd,\n                db.compoundproperty.hba,\n                db.compoundproperty.num_rotatables_bonds,\n                db.compoundproperty.aromatic_rings,\n                db.compoundproperty.num_n,\n                db.compoundproperty.num_o,\n                db.compoundproperty.num_s,\n                db.compoundproperty.num_ro5_violations,\n            )        \n            properties = rows_transpose(table)\n            \n            # Docs selection\n            docs_id = db(db.compound.id==record_id).select(db.compound.docs)\n            try:\n                table = db(db.doc.id.belongs(docs_id.first().docs)).select(\n                    db.doc.journal,\n                    db.doc.year,\n                    db.doc.volume,\n                    db.doc.issue,\n                    db.doc.first_page,\n                    db.doc.last_page,\n                    db.doc.doi,\n                    db.doc.pubmed_id,\n                    db.doc.title,\n                    db.doc.doc_type,\n                    db.doc.authors,\n                    db.doc.abstract,\n                )            \n                docs = rows_transpose(table)\n            except:\n                docs=None\n\n    else:\n        properties = ""\n        docs = ""\n    \n    \n    print doi2doc("10.1016/j.molstruc.2014.10.054")[\'message\'][\'author\']\n   \n    return dict(form=form, properties=properties, docs=docs)\n    \ndef buscar2():\n    """\n    action to show a list of compounds\n    """\n    imagewidth = 70\n    imageheight = 70\n    request.is_local =False\n    #extract of http://stackoverflow.com/questions/21447804/web2py-sqlform-grid-edit-page\n    db.compound.id.readable = False\n    db.compound.id.writeable = False\n \n\n    form = SQLFORM.smartgrid(db.compound,\n        #~ left=db.extract_record.extract_name(db.extract_record.id==db.compound.extract),\n        editable = auth.has_membership(\'managers\'),\n        deletable = auth.has_membership(\'managers\'),\n        buttons_placement = \'left\',\n        paginate = 5,\n        searchable= dict(smiles=True, extract=False),\n        #~ links=[dict(header=T(\'Image\'), body = lambda row: \n        #~ DIV(A(IMG(_src=URL(\'static\',row.imagepath), \n        #~ _width=imagewidth, _height=imageheight),_href="localhost"),_class="img-zoom"))]\n        )\n               \n\n    print calculate_descriptors("NN")\n   \n    return dict(form=form)    \n    \n\ndef custom_search():\n    \'\'\'\n    Implements SQLFORM.grid custom search \n        WITHOUT specifying a custom search_widget,\n            and so needing to read & understand the clever web2py implementation source code.\n    The custom_search.html view contains the EASIER TO UNDERSTAND customization code.\n    The technique:\n        1. Make the grid\'s Standard Search Input hidden.\n        2. Define Custom Search Input elements \n            with onchange events that \n                send their values to the to the hidden Standard Search Input.\n    \'\'\'\n    query=((db.compound.id > 0))\n    fields = (db.compound.id, \n        db.compound.isosmiles, \n        db.compound.name, \n        )\n \n    headers = {\'compound.id\':   \'ID\',\n           \'compound.smiles\': \'Last Name\',\n           \'db.compound.name\': \'Primary Phone\',\n           }    \n    init_sort_order=[db.compound.name]   \n \n    grid = SQLFORM.grid(query=query, \n        fields=fields, \n        headers=headers, \n        orderby=init_sort_order,\n        searchable=True,  \n        user_signature=False, \n        create=True, deletable=False, editable=True, maxtextlength=100, paginate=25)\n \n    return dict(grid=grid)  \n\n\n\n\ndef manage_packages():\n    if request.args(0) == \'new\' and request.args(1) == \'compound\':\n\n        # (1) Get available docs\n        docs = [(r.id, r.title) for r in db(db.doc).select()]\n        print docs\n\n        # (2) Build the form\n        form = SQLFORM.factory(\n            db.compound,\n            Field(\'doc\',\n                requires=IS_IN_SET(docs, multiple=True)\n            )\n        )\n\n        # (3) Validate form data\n        if form.process().accepted:\n\n            # (4) Insert compound\n            compound_id = db.compound.insert(\n                **db.compound._filter_fields(form.vars))\n\n            if compound_id and form.vars.docs:\n\n                # (5) Insert component package associations\n                for doc_id in form.vars.docs:\n                    existing_doc = db.doc(doc_id)\n\n                    if existing_doc:\n                        db.r_compound_doc.insert(\n                            compound_id=compound_id,\n                            doc_id=existing_doc\n                        )\n\n                response.flash = \'Package has been created successfully.\'\n\n        content = form\n    else:\n        content = SQLFORM.grid(db.compound)\n\n    return dict(content=content)\n\n\n\ndef two_forms():\n    \n    form1 = FORM(INPUT(_name=\'form_one\', requires=IS_NOT_EMPTY()),\n               INPUT(_type=\'submit\'))\n    form2 = FORM(INPUT(_name=\'form_two\', requires=IS_NOT_EMPTY()),\n               INPUT(_type=\'submit\'))\n    form3 = SQLFORM.grid(query=db.compound,\n        formname="compound_doc")\n\n    if form1.process(formname=\'form_one\').accepted:\n        response.flash = \'form one accepted\'\n    if form2.process(formname=\'form_two\').accepted:\n        response.flash = \'form two accepted\'\n    return dict(form1=form1, form2=form2, form3=form3)\n    \n    \ndef upload():\n     # (1) Get available components\n    compounds = [(r.id, r.compoundname) for r in db(db.compound).select()]\n\n    # (2) Build the form\n    form = SQLFORM.factory(\n        db.classification,\n        Field(\n            \'compounds\',\n            requires=IS_IN_SET(compounds, multiple=True)\n        )\n    )\n    print compounds\n\n    # (3) Validate form data\n    if form.process().accepted:\n\n        # (4) Insert package\n        classification_id = db.classification.insert(\n            **db.classification._filter_fields(form.vars))\n\n        if classification_id and form.vars.compounds:\n\n            # (5) Insert component package associations\n            for compound_id in form.vars.compounds:\n                existing_compound = db.compound(compound_id)\n\n                if existing_compound:\n                    db.compound_classification.insert(\n                        classification_id=classification_id,\n                        compound_id=existing_compound\n                    )\n\n            response.flash = \'Package has been created successfully.\'\n\n    content = form\n    #~ else:\n        #~ content = SQLFORM.grid(db.classification)\n\n    return dict(content=content)\n    \ndef upload2():\n     # (1) Get available classifications\n    classifications = [(r.id, r.classificationname) for r in db(db.classification).select()]\n    chemicalclasses = [(r.id, r.classname_en) for r in db(db.chemicalclass).select()]\n    #~ extracts = [(r.id, r.extractname) for r in db(db.chemicalclass).select()]\n\n    # (2) Build the form\n    form = SQLFORM.factory(\n        db.compound,\n        Field(\'classifications\',\n            requires=IS_IN_SET(classifications, multiple=True)),\n        Field(\'chemicalclasses\',\n            requires=IS_IN_SET(chemicalclasses, multiple=True)),\n        Field(\'synonyms\', type=\'text\', requires=IS_NOT_EMPTY()),\n    )\n    # (3) Validate form data\n    if form.process().accepted:\n\n        # (4) Insert compound\n        compound_id = db.compound.insert(\n            **db.compound._filter_fields(form.vars))\n        \n        # (5) Insert compound_classification associations\n        if compound_id and form.vars.classifications:\n            for classification_id in form.vars.classifications:\n                existing_classification = db.classification(classification_id)\n                if existing_classification:\n                    db.compound_classification.insert(\n                        compound_id=compound_id,\n                        classification_id=existing_classification)\n                        \n        # (6) Insert compound_chemicalclass associations\n            \n        if compound_id and form.vars.chemicalclasses:\n            for chemicalclass_id in form.vars.chemicalclasses:\n                existing_chemicalclass = db.chemicalclass(chemicalclass_id)\n                if existing_chemicalclass:\n                    db.compound_chemicalclass.insert(\n                        compound_id=compound_id,\n                        chemicalclass_id=existing_chemicalclass)\n                        \n        # (7) Insert synonyms\n        if compound_id and form.vars.synonyms:\n            synonymlist = form.vars.synonyms.split(\'\\n\')\n            for synonym in synonymlist:\n                db.synonym.insert(\n                    compound_id=compound_id,\n                    synonymname=str(synonym).strip(\'\\r\'))\n                        \n\n        response.flash = T(\'Compound has been uploaded successfully.\')\n\n    content = form\n    #~ else:\n        #~ content = SQLFORM.grid(db.compound)\n\n    return dict(content=content)\n\n\n\n\ndef upload_molprocessing(form):\n        #check if extension file is .mol\n        if IS_UPLOAD_FILENAME(extension=\'mol\')(form.vars.molstructure)[1] == None:\n            #check if file is a mol file in correct format\n            if is_valid_ctab(form.vars.molstructure.value) == True: \n                pass\n            #~ inputmolrdkit = Chem.MolFromMolFile(form.vars.molstructure.file)\n            #~ inputmolfile = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n            else:\n                form.errors.molstructure = T(\'You must introduce a mol structure file with correct format.\')\n        elif form.vars.isosmiles:\n            if is_valid_smiles(form.vars.isosmiles)==True:\n                pass\n            else: \n                form.errors.isosmiles = T(\'SMILES has an error, please check\')\n        else:\n            form.errors.isosmiles = T(\'You must introduce an structure using an smiles or uploading a file\') \n            \n             \n\ndef upload3():\n  \n    # (1) Get available classifications\n    classifications = [(r.id, r.classificationname) for r in db(db.classification).select()]\n    chemicalclasses = [(r.id, r.classname_en) for r in db(db.chemicalclass).select()]\n    #~ extracts = [(r.id, r.extractname) for r in db(db.chemicalclass).select()]\n\n    # (2) Build the form\n    form = SQLFORM.factory(\n        Field(\'molstructure\', type=\'upload\', uploadfolder=os.path.join(request.folder,\'static/temp\')), \n        #~ requires = IS_UPLOAD_FILENAME(extension=\'mol\')),\n        db.compound,\n        Field(\'classifications\',\n            requires=IS_IN_SET(classifications, multiple=True)),\n        Field(\'chemicalclasses\',\n            requires=IS_IN_SET(chemicalclasses, multiple=True)),\n        #~ Field(\'inputselector\',requires=IS_IN_SET([\'Smile\',\'Draw\',\'File\']),widget=SQLFORM.widgets.radio.widget),\n        Field(\'synonyms\', type=\'list:string\', requires=IS_NOT_EMPTY()),\n    )\n    \n    # (3) Validate form data\n    if form.process(onvalidation=upload_molprocessing).accepted:\n\n        # (4) Insert compound\n        compound_id = db.compound.insert(\n            **db.compound._filter_fields(form.vars))\n        \n        # (5) Insert compound_classification associations\n        if compound_id and form.vars.classifications:\n            for classification_id in form.vars.classifications:\n                existing_classification = db.classification(classification_id)\n                if existing_classification:\n                    db.compound_classification.insert(\n                        compound_id=compound_id,\n                        classification_id=existing_classification)\n                        \n        # (6) Insert compound_chemicalclass associations\n        if compound_id and form.vars.chemicalclasses:\n            for chemicalclass_id in form.vars.chemicalclasses:\n                existing_chemicalclass = db.chemicalclass(chemicalclass_id)\n                if existing_chemicalclass:\n                    db.compound_chemicalclass.insert(\n                        compound_id=compound_id,\n                        chemicalclass_id=existing_chemicalclass)\n                        \n        # (7) Insert synonyms\n        if compound_id and form.vars.synonyms:\n            synonymlist = form.vars.synonyms\n            for synonym in synonymlist:\n                db.synonym.insert(\n                    compound_id=compound_id,\n                    synonymname=str(synonym).strip(\'\\r\'))\n        \n        # (8) Insert structure\n        if compound_id and form.vars.molstructure:\n            filename = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n            mol_data = file(filename,\'r\').read()\n            # RDKit mol\n            db.executesql("insert into structure (rdkitstructure,compound_id) VALUES (mol_from_ctab(\'%s\'::cstring), \'%i\');"%(mol_data,compound_id))\n            # MOL file\n            db.executesql("insert into structure3d (molfile,compound_id) VALUES (\'%s\'::cstring, \'%i\');"%(mol_data,compound_id))\n\n        elif compound_id and form.vars.isosmiles:\n            # RDKit mol\n            db.executesql("insert into structure (rdkitstructure,compound_id) VALUES (mol_from_smiles(\'%s\'::cstring), \'%i\');"%(form.vars.isosmiles,compound_id))\n            m2 = Chem.MolFromSmiles(form.vars.isosmiles)\n            m2 = Chem.AddHs(m2)\n            AllChem.EmbedMolecule(m2)\n            AllChem.UFFOptimizeMolecule(m2)\n            # MOL file\n            mol_data = Chem.MolToMolBlock(m2)\n            db.executesql("insert into structure3d (molfile,compound_id) VALUES (\'%s\'::cstring, \'%i\');"%(mol_data,compound_id))\n            \n            \n        #~ inputmolfile = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n        #~ inputmolrdkit = Chem.MolFromMolFile(inputmolfile)\n        #~ if inputmolrdkit == None:\n        #~ print inputmolrdkit\n        response.flash = T(\'Compound has been uploaded successfully.\')\n\n\n    content = form\n    #~ else:\n        #~ content = SQLFORM.grid(db.compound)\n\n    return dict(content=content)\n\n\n\ndef submit_compound_processing(form):\n        #check if extension file is .mol\n        if IS_UPLOAD_FILENAME(extension=\'mol\')(form.vars.molstructure)[1] == None:\n            #check if file is a mol file in correct format\n            if is_valid_ctab(form.vars.molstructure.value) == True: \n                pass\n            #~ inputmolrdkit = Chem.MolFromMolFile(form.vars.molstructure.file)\n            #~ inputmolfile = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n            else:\n                form.errors.molstructure = T(\'You must introduce a mol structure file with correct format.\')\n        elif form.vars.isosmiles:\n            if is_valid_smiles(form.vars.isosmiles)==True:\n                pass\n            else: \n                form.errors.isosmiles = T(\'SMILES has an error, please check\')\n        else:\n            form.errors.isosmiles = T(\'You must introduce an structure using an smiles or uploading a file\') \n            \n\n\'\'\'\nSubmition of a new compound. \nThis data is store in temporal tables\n\'\'\'\ndef submit_compound():\n    # (2) Build the form\n    form = SQLFORM.factory(\n        Field(\'molstructure\', type=\'upload\', uploadfolder=os.path.join(request.folder,\'static/temp\')), \n        db.compoundsubmission,\n        #~ Field(\'inputselector\',requires=IS_IN_SET([\'Smile\',\'Draw\',\'File\']),widget=SQLFORM.widgets.radio.widget),\n        Field(\'synonyms\', type=\'list:string\', requires=IS_NOT_EMPTY()),\n    )\n    \n    # (3) Validate form data\n    if form.process(onvalidation=submit_compound_processing).accepted:\n\t\t\n\t\t# (4) Insert compound\n        compoundsubmission_id = db.compoundsubmission.insert(\n            **db.compoundsubmission._filter_fields(form.vars))\n\t\t\t\t\n        # (7) Insert synonyms\n        if compoundsubmission_id and form.vars.tmpsynonyms:\n            synonymlist = form.vars.synonyms\n            for synonym in synonymlist:\n                db.tmpsynonym.insert(\n                    compoundsubmission_id=compoundsubmission_id,\n                    synonymname=str(synonym).strip(\'\\r\'))\n        \n        # (8) Insert structure\n        if compoundsubmission_id and form.vars.molstructure:\n            molfilename = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n            rdkitmol = Chem.MolFromMolFile(molfilename)\n            mol_data = file(molfilename,\'r\').read()\n            smiles_data = Chem.MolToSmiles(rdkitmol)\n        elif compound_id and form.vars.isosmiles:\n            rdkitmol = Chem.MolFromSmiles(form.vars.smiles)\n            rdkitmol = Chem.AddHs(rdkitmol)\n            AllChem.EmbedMolecule(rdkitmol)\n            AllChem.UFFOptimizeMolecule(rdkitmol)\n            mol_data = Chem.MolToMolBlock(rdkitmol)\n            smiles_data = form.vars.smiles\n        \n        print compoundsubmission_id\n        print 10*"\\n"    \n        db.executesql("insert into compoundsubmission (smiles, molstructure, rdkitstructure, addinfo, id) VALUES (\'%s\'::cstring, \'%s\'::cstring, mol_from_ctab(\'%s\'::cstring), \'%s\'::cstring, \'%i\');"%(smiles_data, mol_data, mol_data, form.vars.addinfo, compoundsubmission_id))\n          \n        #~ inputmolfile = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n        #~ inputmolrdkit = Chem.MolFromMolFile(inputmolfile)\n        response.flash = T(\'Compound has been uploaded successfully.\')\n    content = form\n    return dict(content=content)\n\n\n\ndef product():\n    if not request.args: redirect(URL(c=\'default\',f=\'index\'))\n    try:\n        int(request.args(0))\n    except ValueError:\n        raise HTTP(404, \'Product not found. Invalid ID.\')\n\n    product = db(db.compound.id == int(request.args(0))).select().first()\n    specification = db(db.specification.product == product.id).select().first()\n    reviews = db(db.review.product == product.id).select()\n\n    form = SQLFORM.factory(\n        Field(\'quantity\', \'integer\', default=1),\n        _class="form-inline"\n        )\n    if form.accepts(request.vars, session):\n        quantity = int(form.vars.quantity)\n        if quantity > product.quantity or quantity <= 0:\n            response.flash = T(\'Unavailable quantity.\')\n        else:\n            for prod in session.cart:\n                if prod[0] == product.id:\n                    prod[1] += quantity\n                    break\n                else:\n                    session.cart.append([product.id, quantity])\n                    break\n            else:\n                session.cart.append([product.id, quantity])\n            redirect(URL(c=\'default\',f=\'checkout\'))\n\n    return dict(product=product, specification=specification, reviews=reviews, form=form)\n\nresponse._vars=response._caller(submit_compound)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/mnt/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/mnt/web2py/applications/naturardb/controllers/compuestos.py", line 557, in <module>\n  File "/mnt/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/mnt/web2py/applications/naturardb/controllers/compuestos.py", line 514, in submit_compound\n    db.executesql("insert into compoundsubmission (smiles, molstructure, rdkitstructure, addinfo, id) VALUES (\'%s\'::cstring, \'%s\'::cstring, mol_from_ctab(\'%s\'::cstring), \'%s\'::cstring, \'%i\');"%(smiles_data, mol_data, mol_data, form.vars.addinfo, compoundsubmission_id))\n  File "/mnt/web2py/gluon/packages/dal/pydal/base.py", line 1019, in executesql\n    adapter.execute(query)\n  File "/mnt/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 362, in execute\n    return BaseAdapter.execute(self, *a, **b)\n  File "/mnt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/mnt/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/mnt/web2py/gluon/contrib/pg8000/core.py", line 573, in execute\n    self._c.execute(self, operation, args)\n  File "/mnt/web2py/gluon/contrib/pg8000/core.py", line 1697, in execute\n    self.handle_messages(cursor)\n  File "/mnt/web2py/gluon/contrib/pg8000/core.py", line 1774, in handle_messages\n    raise self.error\nProgrammingError: (\'ERROR\', \'23505\', \'duplicate key value violates unique constraint "compoundsubmission_pkey"\')\n'
p11
s.