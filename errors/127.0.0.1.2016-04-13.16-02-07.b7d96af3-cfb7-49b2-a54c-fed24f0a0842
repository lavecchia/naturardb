(dp1
S'output'
p2
S"<class 'psycopg2.ProgrammingError'> can't adapt type 'Mol'"
p3
sS'layer'
p4
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/controllers/compuestos.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\nfrom rdkit.Chem import AllChem\nimport os.path \n\n#~ def list_molecules():\n    #~ """\n    #~ show compound like a image grid\n    #~ """\n    #~ if len(request.args): page=int(request.args[0])\n    #~ else: page=0\n    #~ items_per_page=5\n    #~ limitby=(page*items_per_page,(page+1)*items_per_page+1)\n    #~ rows=db().select(db.compound.ALL,limitby=limitby)\n    #~ return dict(rows=rows,page=page,items_per_page=items_per_page)\n\n\ndef list_molecules2():\n    grid = SQLFORM.smartgrid(db.compound, paginate=5)\n    return locals()\n\n#~ @auth.requires_membership(\'managers\')\ndef buscar():\n    """\n    action to show a list of compounds\n    """\n    imagewidth = 70\n    imageheight = 70\n    request.is_local =False\n    #extract of http://stackoverflow.com/questions/21447804/web2py-sqlform-grid-edit-page\n    db.compound.id.readable = False\n    db.compound.id.writeable = False\n \n\n    form = SQLFORM.grid(\n        query=db.compound,\n        formname="compound",\n        editable = auth.has_membership(\'managers\'),\n        deletable = auth.has_membership(\'managers\'),\n        buttons_placement = \'left\',\n        paginate = 5,\n        searchable= dict(smiles=True, extract=False),\n        links=[dict(header=T(\'Image\'), body = lambda row: \n        DIV(A(IMG(_src=URL(\'static\',row.imagepath), \n        _width=imagewidth, _height=imageheight),_href="localhost"),_class="img-zoom"))])\n        \n   \n   \n    #if "view" in request.args(0)request.env.request_uri:\n    #~ try:\n    if request.args(0):\n        if "view" in request.args(0):\n            record_id = form.view_form.record_id \n            # Properties selection\n            table = db(db.compound_property.compound_id==record_id).select(\n                db.compoundproperty.molecular_weight,\n                db.compoundproperty.molecular_formula,\n                db.compoundproperty.molecular_volume,\n                db.compoundproperty.smiles,\n                db.compoundproperty.clogp,\n                db.compoundproperty.xlogp,\n                db.compoundproperty.tpsa,\n                db.compoundproperty.hbd,\n                db.compoundproperty.hba,\n                db.compoundproperty.num_rotatables_bonds,\n                db.compoundproperty.aromatic_rings,\n                db.compoundproperty.num_n,\n                db.compoundproperty.num_o,\n                db.compoundproperty.num_s,\n                db.compoundproperty.num_ro5_violations,\n            )        \n            properties = rows_transpose(table)\n            \n            # Docs selection\n            docs_id = db(db.compound.id==record_id).select(db.compound.docs)\n            try:\n                table = db(db.doc.id.belongs(docs_id.first().docs)).select(\n                    db.doc.journal,\n                    db.doc.year,\n                    db.doc.volume,\n                    db.doc.issue,\n                    db.doc.first_page,\n                    db.doc.last_page,\n                    db.doc.doi,\n                    db.doc.pubmed_id,\n                    db.doc.title,\n                    db.doc.doc_type,\n                    db.doc.authors,\n                    db.doc.abstract,\n                )            \n                docs = rows_transpose(table)\n            except:\n                docs=None\n\n    else:\n        properties = ""\n        docs = ""\n    \n    \n    print doi2doc("10.1016/j.molstruc.2014.10.054")[\'message\'][\'author\']\n   \n    return dict(form=form, properties=properties, docs=docs)\n    \ndef buscar2():\n    """\n    action to show a list of compounds\n    """\n    imagewidth = 70\n    imageheight = 70\n    request.is_local =False\n    #extract of http://stackoverflow.com/questions/21447804/web2py-sqlform-grid-edit-page\n    db.compound.id.readable = False\n    db.compound.id.writeable = False\n \n\n    form = SQLFORM.smartgrid(db.compound,\n        #~ left=db.extract_record.extract_name(db.extract_record.id==db.compound.extract),\n        editable = auth.has_membership(\'managers\'),\n        deletable = auth.has_membership(\'managers\'),\n        buttons_placement = \'left\',\n        paginate = 5,\n        searchable= dict(smiles=True, extract=False),\n        #~ links=[dict(header=T(\'Image\'), body = lambda row: \n        #~ DIV(A(IMG(_src=URL(\'static\',row.imagepath), \n        #~ _width=imagewidth, _height=imageheight),_href="localhost"),_class="img-zoom"))]\n        )\n               \n\n    print calculate_descriptors("NN")\n   \n    return dict(form=form)    \n    \n\ndef custom_search():\n    \'\'\'\n    Implements SQLFORM.grid custom search \n        WITHOUT specifying a custom search_widget,\n            and so needing to read & understand the clever web2py implementation source code.\n    The custom_search.html view contains the EASIER TO UNDERSTAND customization code.\n    The technique:\n        1. Make the grid\'s Standard Search Input hidden.\n        2. Define Custom Search Input elements \n            with onchange events that \n                send their values to the to the hidden Standard Search Input.\n    \'\'\'\n    query=((db.compound.id > 0))\n    fields = (db.compound.id, \n        db.compound.smiles, \n        db.compound.name, \n        )\n \n    headers = {\'compound.id\':   \'ID\',\n           \'compound.smiles\': \'Last Name\',\n           \'db.compound.name\': \'Primary Phone\',\n           }    \n    init_sort_order=[db.compound.name]   \n \n    grid = SQLFORM.grid(query=query, \n        fields=fields, \n        headers=headers, \n        orderby=init_sort_order,\n        searchable=True,  \n        user_signature=False, \n        create=True, deletable=False, editable=True, maxtextlength=100, paginate=25)\n \n    return dict(grid=grid)  \n\n\n\n\ndef manage_packages():\n    if request.args(0) == \'new\' and request.args(1) == \'compound\':\n\n        # (1) Get available docs\n        docs = [(r.id, r.title) for r in db(db.doc).select()]\n        print docs\n\n        # (2) Build the form\n        form = SQLFORM.factory(\n            db.compound,\n            Field(\'doc\',\n                requires=IS_IN_SET(docs, multiple=True)\n            )\n        )\n\n        # (3) Validate form data\n        if form.process().accepted:\n\n            # (4) Insert compound\n            compound_id = db.compound.insert(\n                **db.compound._filter_fields(form.vars))\n\n            if compound_id and form.vars.docs:\n\n                # (5) Insert component package associations\n                for doc_id in form.vars.docs:\n                    existing_doc = db.doc(doc_id)\n\n                    if existing_doc:\n                        db.r_compound_doc.insert(\n                            compound_id=compound_id,\n                            doc_id=existing_doc\n                        )\n\n                response.flash = \'Package has been created successfully.\'\n\n        content = form\n    else:\n        content = SQLFORM.grid(db.compound)\n\n    return dict(content=content)\n\n\n\ndef two_forms():\n    \n    form1 = FORM(INPUT(_name=\'form_one\', requires=IS_NOT_EMPTY()),\n               INPUT(_type=\'submit\'))\n    form2 = FORM(INPUT(_name=\'form_two\', requires=IS_NOT_EMPTY()),\n               INPUT(_type=\'submit\'))\n    form3 = SQLFORM.grid(query=db.compound,\n        formname="compound_doc")\n\n    if form1.process(formname=\'form_one\').accepted:\n        response.flash = \'form one accepted\'\n    if form2.process(formname=\'form_two\').accepted:\n        response.flash = \'form two accepted\'\n    return dict(form1=form1, form2=form2, form3=form3)\n    \n    \ndef upload():\n     # (1) Get available components\n    compounds = [(r.id, r.compoundname) for r in db(db.compound).select()]\n\n    # (2) Build the form\n    form = SQLFORM.factory(\n        db.classification,\n        Field(\n            \'compounds\',\n            requires=IS_IN_SET(compounds, multiple=True)\n        )\n    )\n    print compounds\n\n    # (3) Validate form data\n    if form.process().accepted:\n\n        # (4) Insert package\n        classification_id = db.classification.insert(\n            **db.classification._filter_fields(form.vars))\n\n        if classification_id and form.vars.compounds:\n\n            # (5) Insert component package associations\n            for compound_id in form.vars.compounds:\n                existing_compound = db.compound(compound_id)\n\n                if existing_compound:\n                    db.compound_classification.insert(\n                        classification_id=classification_id,\n                        compound_id=existing_compound\n                    )\n\n            response.flash = \'Package has been created successfully.\'\n\n    content = form\n    #~ else:\n        #~ content = SQLFORM.grid(db.classification)\n\n    return dict(content=content)\n    \ndef upload2():\n     # (1) Get available classifications\n    classifications = [(r.id, r.classificationname) for r in db(db.classification).select()]\n    chemicalclasses = [(r.id, r.classname_en) for r in db(db.chemicalclass).select()]\n    #~ extracts = [(r.id, r.extractname) for r in db(db.chemicalclass).select()]\n\n    # (2) Build the form\n    form = SQLFORM.factory(\n        db.compound,\n        Field(\'classifications\',\n            requires=IS_IN_SET(classifications, multiple=True)),\n        Field(\'chemicalclasses\',\n            requires=IS_IN_SET(chemicalclasses, multiple=True)),\n        Field(\'synonyms\', type=\'text\', requires=IS_NOT_EMPTY()),\n    )\n    # (3) Validate form data\n    if form.process().accepted:\n\n        # (4) Insert compound\n        compound_id = db.compound.insert(\n            **db.compound._filter_fields(form.vars))\n        \n        # (5) Insert compound_classification associations\n        if compound_id and form.vars.classifications:\n            for classification_id in form.vars.classifications:\n                existing_classification = db.classification(classification_id)\n                if existing_classification:\n                    db.compound_classification.insert(\n                        compound_id=compound_id,\n                        classification_id=existing_classification)\n                        \n        # (6) Insert compound_chemicalclass associations\n            \n        if compound_id and form.vars.chemicalclasses:\n            for chemicalclass_id in form.vars.chemicalclasses:\n                existing_chemicalclass = db.chemicalclass(chemicalclass_id)\n                if existing_chemicalclass:\n                    db.compound_chemicalclass.insert(\n                        compound_id=compound_id,\n                        chemicalclass_id=existing_chemicalclass)\n                        \n        # (7) Insert synonyms\n        if compound_id and form.vars.synonyms:\n            synonymlist = form.vars.synonyms.split(\'\\n\')\n            for synonym in synonymlist:\n                db.synonym.insert(\n                    compound_id=compound_id,\n                    synonymname=str(synonym).strip(\'\\r\'))\n                        \n\n        response.flash = T(\'Compound has been uploaded successfully.\')\n\n    content = form\n    #~ else:\n        #~ content = SQLFORM.grid(db.compound)\n\n    return dict(content=content)\n\n\n\n\ndef upload_molprocessing(form):\n        if form.vars.molstructure != None:\n            #check if file is a mol file in correct format\n            if is_valid_ctab(form.vars.molstructure.value) == True: \n                pass\n            #~ inputmolrdkit = Chem.MolFromMolFile(form.vars.molstructure.file)\n            #~ inputmolfile = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n            else:\n                form.errors.molstructure = T(\'You must introduce a mol structure file with correct format.\')\n        elif form.vars.isosmiles:\n            if is_valid_smiles(form.vars.isosmiles)==True:\n                pass\n            else: \n                form.errors.isosmiles = T(\'SMILES has an error, please check\')\n        else:\n            form.errors.isosmiles = T(\'You must introduce an structure using an smiles or uploading a file\')  \n\ndef upload3():\n     # (1) Get available classifications\n    classifications = [(r.id, r.classificationname) for r in db(db.classification).select()]\n    chemicalclasses = [(r.id, r.classname_en) for r in db(db.chemicalclass).select()]\n    #~ extracts = [(r.id, r.extractname) for r in db(db.chemicalclass).select()]\n\n    # (2) Build the form\n    form = SQLFORM.factory(\n        Field(\'molstructure\', type=\'upload\', uploadfolder=os.path.join(request.folder,\'static/temp\'), \n        requires = IS_UPLOAD_FILENAME(extension=\'mol\')),\n        db.compound,\n        Field(\'classifications\',\n            requires=IS_IN_SET(classifications, multiple=True)),\n        Field(\'chemicalclasses\',\n            requires=IS_IN_SET(chemicalclasses, multiple=True)),\n        #~ Field(\'inputselector\',requires=IS_IN_SET([\'Smile\',\'Draw\',\'File\']),widget=SQLFORM.widgets.radio.widget),\n        Field(\'synonyms\', type=\'list:string\', requires=IS_NOT_EMPTY()),\n    )\n    \n    # (3) Validate form data\n    if form.process(onvalidation=upload_molprocessing).accepted:\n\n        # (4) Insert compound\n        compound_id = db.compound.insert(\n            **db.compound._filter_fields(form.vars))\n        \n        # (5) Insert compound_classification associations\n        if compound_id and form.vars.classifications:\n            for classification_id in form.vars.classifications:\n                existing_classification = db.classification(classification_id)\n                if existing_classification:\n                    db.compound_classification.insert(\n                        compound_id=compound_id,\n                        classification_id=existing_classification)\n                        \n        # (6) Insert compound_chemicalclass associations\n        if compound_id and form.vars.chemicalclasses:\n            for chemicalclass_id in form.vars.chemicalclasses:\n                existing_chemicalclass = db.chemicalclass(chemicalclass_id)\n                if existing_chemicalclass:\n                    db.compound_chemicalclass.insert(\n                        compound_id=compound_id,\n                        chemicalclass_id=existing_chemicalclass)\n                        \n        # (7) Insert synonyms\n        if compound_id and form.vars.synonyms:\n            synonymlist = form.vars.synonyms\n            for synonym in synonymlist:\n                db.synonym.insert(\n                    compound_id=compound_id,\n                    synonymname=str(synonym).strip(\'\\r\'))\n        \n        # (8) Insert structure\n        if compound_id and form.vars.molstructure:\n            db.structure.insert(\n            compound_id=compound_id,\n            molstructure=Chem.MolFromMolFile(os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure)\n            )\n            \n            \n        \n        #~ inputmolfile = os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure\n        #~ inputmolrdkit = Chem.MolFromMolFile(inputmolfile)\n        #~ if inputmolrdkit == None:\n        #~ print inputmolrdkit\n        response.flash = T(\'Compound has been uploaded successfully.\')\n\n\n    content = form\n    #~ else:\n        #~ content = SQLFORM.grid(db.compound)\n\n    return dict(content=content)\n\nresponse._vars=response._caller(upload3)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'psycopg2'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of ProgrammingError object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of ProgrammingError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of ProgrammingError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of ProgrammingError object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'__init__'
p26
S"<method-wrapper '__init__' of ProgrammingError object>"
p27
sS'__setattr__'
p28
S"<method-wrapper '__setattr__' of ProgrammingError object>"
p29
sS'__reduce_ex__'
p30
S'<built-in method __reduce_ex__ of ProgrammingError object>'
p31
sS'__new__'
p32
S'<built-in method __new__ of type object>'
p33
sS'__format__'
p34
S'<built-in method __format__ of ProgrammingError object>'
p35
sS'__class__'
p36
S"<class 'psycopg2.ProgrammingError'>"
p37
sS'pgerror'
p38
S'None'
p39
sS'__doc__'
p40
S"'Error related to database programming (SQL error, table not found etc).'"
p41
sS'__getitem__'
p42
S"<method-wrapper '__getitem__' of ProgrammingError object>"
p43
sS'__setstate__'
p44
S'<built-in method __setstate__ of ProgrammingError object>'
p45
sS'__getattribute__'
p46
S"<method-wrapper '__getattribute__' of ProgrammingError object>"
p47
sS'args'
p48
S'("can\'t adapt type \'Mol\'",)'
p49
sS'__subclasshook__'
p50
S'<built-in method __subclasshook__ of type object>'
p51
sS'pgcode'
p52
S'None'
p53
sS'__unicode__'
p54
S'<built-in method __unicode__ of ProgrammingError object>'
p55
sS'cursor'
p56
S'None'
p57
sS'__delattr__'
p58
S"<method-wrapper '__delattr__' of ProgrammingError object>"
p59
sS'__repr__'
p60
S"<method-wrapper '__repr__' of ProgrammingError object>"
p61
sS'__hash__'
p62
S"<method-wrapper '__hash__' of ProgrammingError object>"
p63
ssS'evalue'
p64
S"can't adapt type 'Mol'"
p65
sS'request'
p66
cgluon.html
XML_unpickle
p67
(S's\x03f\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>naturar</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>compuestos</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-551a1cec-da5f-44ad-b923-1ecf5ac0bde4<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin2</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-00c52e21-cd19-4bb6-b6c8-ba0d929431ac<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_naturar</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-6319cafa-3f37-42c2-81d6-b1a3eb4e77d4<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-7cce0eac-acb6-411e-a5ff-f513181db121<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>4276</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------118691393715118140221625280849</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>4276</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------118691393715118140221625280849</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-7cce0eac-acb6-411e-a5ff-f513181db121; session_id_admin=127.0.0.1-551a1cec-da5f-44ad-b923-1ecf5ac0bde4; session_id_naturar=127.0.0.1-6319cafa-3f37-42c2-81d6-b1a3eb4e77d4; session_id_admin2=127.0.0.1-00c52e21-cd19-4bb6-b6c8-ba0d929431ac</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/naturar/compuestos/upload3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/naturar/compuestos/upload3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>42460</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>Atomus</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/admin/&#x27;, &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/welcome/&#x27;, &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/&#x27;, &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/admin2/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/mjl/Dropbox/FITOMEDICINA/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x7f3e7c6e8998: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Atomus&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div>4276</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------118691393715118140221625280849</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/mjl/Dropbox/FITOMEDICINA/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.5</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_length</td><td style="vertical-align:top;">:</td><td><div>4276</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_type</td><td style="vertical-align:top;">:</td><td><div>multipart/form-data; boundary=---------------------------118691393715118140221625280849</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>session_id_welcome=127.0.0.1-7cce0eac-acb6-411e-a5ff-f513181db121; session_id_admin=127.0.0.1-551a1cec-da5f-44ad-b923-1ecf5ac0bde4; session_id_naturar=127.0.0.1-6319cafa-3f37-42c2-81d6-b1a3eb4e77d4; session_id_admin2=127.0.0.1-00c52e21-cd19-4bb6-b6c8-ba0d929431ac</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/naturar/compuestos/upload3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>Atomus</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/naturar/compuestos/upload3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>42460</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/naturar/compuestos/upload3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>Atomus</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/home/mjl/Dropbox/FITOMEDICINA/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.3-stable+timestamp.2016.03.26.23.02.02</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7f3e844e91e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x7f3e7c62a120&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x7f3e500e6950&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7f3e844e91e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x7f3e7c62a120&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x7f3e500e6950&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>upload3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/admin/&#x27;, &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/welcome/&#x27;, &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/&#x27;, &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/admin2/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/home/mjl/Dropbox/FITOMEDICINA/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x7f3e7c6e8998: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;Atomus&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/home/mjl/Dropbox/FITOMEDICINA/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>Atomus</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.3-stable+timestamp.2016.03.26.23.02.02</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 4, 13, 16, 2, 7, 979300)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/naturar/compuestos/upload3</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2016, 4, 13, 19, 2, 7, 979315)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7f3e29013390&gt;</div></td></tr></table></div>'
tRp68
sS'frames'
p69
(lp70
(dp71
S'file'
p72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/restricted.py'
p73
sS'dump'
p74
(dp75
S'environment'
p76
S"{'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AllChem': <module 'rdkit.Chem.AllChem' from '/opt/rdkit-Release_2015_03_1/rdkit/Chem/AllChem.py'>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}"
p77
sS'ccode'
p78
S'<code object <module> at 0x7f3e2938f830, file "/...ions/naturar/controllers/compuestos.py", line 10>'
p79
ssS'lnum'
p80
I227
sS'lines'
p81
(dp82
I224
S'            ccode = code'
p83
sI225
S'        else:'
p84
sI226
S'            ccode = compile2(code, layer)'
p85
sI227
S'        exec ccode in environment'
p86
sI228
S'    except HTTP:'
p87
sI229
S'        raise'
p88
sI230
S'    except RestrictedError:'
p89
sI231
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p90
sI222
S'    try:'
p91
sI223
S'        if isinstance(code, types.CodeType):'
p92
ssS'call'
p93
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...ntent)\\n\\nresponse._vars=response._caller(upload3)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AllChem': <module 'rdkit.Chem.AllChem' from '/opt/rdkit-Release_2015_03_1/rdkit/Chem/AllChem.py'>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, ...}, layer='/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/controllers/compuestos.py')"
p94
sS'func'
p95
S'restricted'
p96
sa(dp97
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/controllers/compuestos.py'
p98
sg74
(dp99
sg80
I433
sg81
(dp100
I422
S'        #~ if inputmolrdkit == None:'
p101
sI423
S'        #~ print inputmolrdkit'
p102
sI424
S"        response.flash = T('Compound has been uploaded successfully.')"
p103
sI425
S''
sI426
S''
sI427
S'    content = form'
p104
sI428
S'    #~ else:'
p105
sI429
S'        #~ content = SQLFORM.grid(db.compound)'
p106
sI430
S''
sI431
S'    return dict(content=content)'
p107
ssg93
S'()'
p108
sg95
S'<module>'
p109
sa(dp110
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/globals.py'
p111
sg74
(dp112
S'self'
p113
S'undefined'
p114
sS'f'
S'<function upload3>'
p115
ssg80
I417
sg81
(dp116
I416
S'        self._vars = None'
p117
sI417
S'        self._caller = lambda f: f()'
p118
sI418
S'        self._view_environment = None'
p119
sI419
S'        self._custom_commit = None'
p120
sI420
S'        self._custom_rollback = None'
p121
sI421
S"        self.generic_patterns = ['*']"
p122
sI412
S"        self.flash = ''            # used by the default view layout"
p123
sI413
S'        self.meta = Storage()      # used by web2py_ajax.html'
p124
sI414
S'        self.menu = []             # used by the default view layout'
p125
sI415
S'        self.files = []            # used by web2py_ajax.html'
p126
ssg93
S'(f=<function upload3>)'
p127
sg95
S'<lambda>'
p128
sa(dp129
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/controllers/compuestos.py'
p130
sg74
(dp131
S'form.vars'
p132
S"<Storage {'inchikey': None, 'chemicalclasses': [...nchi': None, 'addinfo': None, 'approved': False}>"
p133
sS'form'
p134
S'<gluon.sqlhtml.SQLFORM object>'
p135
sS'global request'
p136
S"<Storage {'_vars': None, 'function': 'upload3', ...pbox/FITOMEDICINA/web2py/applications/naturar/'}>"
p137
sS'request.folder'
p138
S"'/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/'"
p139
sS'molstructure'
p140
g114
sS'global os'
p141
S"<module 'os' from '/usr/lib/python2.7/os.pyc'>"
p142
sS'Chem.MolFromMolFile'
p143
S'<Boost.Python.function object>'
p144
sS'global Chem'
p145
S"<module 'rdkit.Chem' from '/opt/rdkit-Release_2015_03_1/rdkit/Chem/__init__.py'>"
p146
sS'os.path.join'
p147
S'<function join>'
p148
sS'form.vars.molstructure'
p149
S"'no_table.molstructure.960b3176ccbd6ab2.7072756562612e6d6f6c.mol'"
p150
sS'os.path'
p151
S"<module 'posixpath' from '/usr/lib/python2.7/posixpath.pyc'>"
p152
ssg80
I415
sg81
(dp153
I416
S'            )'
p154
sI417
S''
sI418
S''
sI419
S''
sI410
S''
sI411
S'        # (8) Insert structure'
p155
sI412
S'        if compound_id and form.vars.molstructure:'
p156
sI413
S'            db.structure.insert('
p157
sI414
S'            compound_id=compound_id,'
p158
sI415
S"            molstructure=Chem.MolFromMolFile(os.path.join(request.folder,'static/temp/') + form.vars.molstructure)"
p159
ssg93
S'()'
p160
sg95
S'upload3'
p161
sa(dp162
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/objects.py'
p163
sg74
(dp164
S'self._listify'
p165
S'<bound method Table._listify of <Table structure...ied_on, modified_by, molstructure, compound_id)>>'
p166
sS'fields'
p167
S"{'compound_id': 21L, 'created_by': <function lazy_user>, 'created_on': datetime.datetime(2016, 4, 13, 16, 2, 7, 979300), 'is_active': True, 'modified_by': <function lazy_user>, 'modified_on': datetime.datetime(2016, 4, 13, 16, 2, 7, 979300), 'molstructure': <rdkit.Chem.rdchem.Mol object>}"
p168
sS'self'
p169
S'<Table structure (id, is_active, created_on, cre...fied_on, modified_by, molstructure, compound_id)>'
p170
sS'ret'
p171
g114
sS'self._db._adapter'
p172
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p173
sS'self._db._adapter.insert'
p174
S'<bound method PostgreSQLAdapter.insert of <pydal.adapters.postgres.PostgreSQLAdapter object>>'
p175
sS'self._db'
p176
S'<DAL uri="postgres:******@localhost/naturardb">'
p177
ssg80
I726
sg81
(dp178
I721
S'    def insert(self, **fields):'
p179
sI722
S'        fields = self._defaults(fields)'
p180
sI723
S'        self._attempt_upload(fields)'
p181
sI724
S'        if any(f(fields) for f in self._before_insert):'
p182
sI725
S'            return 0'
p183
sI726
S'        ret = self._db._adapter.insert(self, self._listify(fields))'
p184
sI727
S'        if ret and self._after_insert:'
p185
sI728
S'            fields = Row(fields)'
p186
sI729
S'            [f(fields, ret) for f in self._after_insert]'
p187
sI730
S'        return ret'
p188
ssg93
S"(self=<Table structure (id, is_active, created_on, cre...fied_on, modified_by, molstructure, compound_id)>, **fields={'compound_id': 21L, 'created_by': <function lazy_user>, 'created_on': datetime.datetime(2016, 4, 13, 16, 2, 7, 979300), 'is_active': True, 'modified_by': <function lazy_user>, 'modified_on': datetime.datetime(2016, 4, 13, 16, 2, 7, 979300), 'molstructure': <rdkit.Chem.rdchem.Mol object>})"
p189
sg95
S'insert'
p190
sa(dp191
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py'
p192
sg74
(dp193
S'self._insert'
p194
S'<bound method PostgreSQLAdapter._insert of <pydal.adapters.postgres.PostgreSQLAdapter object>>'
p195
sS'query'
p196
g114
sS'self'
p197
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p198
sS'fields'
p199
S'[(<pydal.objects.Field object>, 21L), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, True), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300)), (<pydal.objects.Field object>, <rdkit.Chem.rdchem.Mol object>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300))]'
p200
sS'table'
p201
S'<Table structure (id, is_active, created_on, cre...fied_on, modified_by, molstructure, compound_id)>'
p202
ssg80
I739
sg81
(dp203
I736
S"        return 'INSERT INTO %s DEFAULT VALUES;' % (table.sqlsafe)"
p204
sI737
S''
sI738
S'    def insert(self, table, fields):'
p205
sI739
S'        query = self._insert(table,fields)'
p206
sI740
S'        try:'
p207
sI741
S'            self.execute(query)'
p208
sI742
S'        except Exception:'
p209
sI743
S'            e = sys.exc_info()[1]'
p210
sI734
S''
sI735
S'    def _insert_empty(self, table):'
p211
ssg93
S'(self=<pydal.adapters.postgres.PostgreSQLAdapter object>, table=<Table structure (id, is_active, created_on, cre...fied_on, modified_by, molstructure, compound_id)>, fields=[(<pydal.objects.Field object>, 21L), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, True), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300)), (<pydal.objects.Field object>, <rdkit.Chem.rdchem.Mol object>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300))])'
p212
sg95
g190
sa(dp213
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py'
p214
sg74
(dp215
S'f'
g114
sS'fields'
p216
S'[(<pydal.objects.Field object>, 21L), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, True), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300)), (<pydal.objects.Field object>, <rdkit.Chem.rdchem.Mol object>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300))]'
p217
sS'self'
p218
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p219
sS'values'
p220
g114
sS'v'
g114
sS'self.expand'
p221
S'<bound method PostgreSQLAdapter.expand of <pydal.adapters.postgres.PostgreSQLAdapter object>>'
p222
ssg80
I167
sg81
(dp223
I162
S''
sI163
S'    def _insert(self, table, fields):'
p224
sI164
S'        table_rname = table.sqlsafe'
p225
sI165
S'        if fields:'
p226
sI166
S"            keys = ','.join(f.sqlsafe_name for f, v in fields)"
p227
sI167
S"            values = ','.join(self.expand(v, f.type) for f, v in fields)"
p228
sI168
S"            if hasattr(table, '_id'):"
p229
sI169
S'                self._last_insert = (table._id, 1)'
p230
sI170
S"                return 'INSERT INTO %s(%s) VALUES (%s) RETURNING %s;' % ("
p231
sI171
S'                    table_rname, keys, values, self.QUOTE_TEMPLATE % table._id.name)'
p232
ssg93
S'(self=<pydal.adapters.postgres.PostgreSQLAdapter object>, table=<Table structure (id, is_active, created_on, cre...fied_on, modified_by, molstructure, compound_id)>, fields=[(<pydal.objects.Field object>, 21L), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, True), (<pydal.objects.Field object>, <function lazy_user>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300)), (<pydal.objects.Field object>, <rdkit.Chem.rdchem.Mol object>), (<pydal.objects.Field object>, datetime.datetime(2016, 4, 13, 16, 2, 7, 979300))])'
p233
sg95
S'_insert'
p234
sa(dp235
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py'
p236
sg74
(dp237
S'f'
S'<pydal.objects.Field object>'
p238
sS'fields'
p239
g114
sS'self'
p240
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p241
sS'f.type'
p242
S'<pydal.helpers.classes.SQLCustomType object>'
p243
sS'values'
p244
g114
sS'v'
S'<rdkit.Chem.rdchem.Mol object>'
p245
sS'self.expand'
p246
S'<bound method PostgreSQLAdapter.expand of <pydal.adapters.postgres.PostgreSQLAdapter object>>'
p247
ssg80
I167
sg81
(dp248
I162
S''
sI163
S'    def _insert(self, table, fields):'
p249
sI164
S'        table_rname = table.sqlsafe'
p250
sI165
S'        if fields:'
p251
sI166
S"            keys = ','.join(f.sqlsafe_name for f, v in fields)"
p252
sI167
S"            values = ','.join(self.expand(v, f.type) for f, v in fields)"
p253
sI168
S"            if hasattr(table, '_id'):"
p254
sI169
S'                self._last_insert = (table._id, 1)'
p255
sI170
S"                return 'INSERT INTO %s(%s) VALUES (%s) RETURNING %s;' % ("
p256
sI171
S'                    table_rname, keys, values, self.QUOTE_TEMPLATE % table._id.name)'
p257
ssg93
S'((f=<pydal.objects.Field object>, v=<rdkit.Chem.rdchem.Mol object>))'
p258
sg95
S'<genexpr>'
p259
sa(dp260
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py'
p261
sg74
(dp262
S'self.represent'
p263
S'<bound method PostgreSQLAdapter.represent of <pydal.adapters.postgres.PostgreSQLAdapter object>>'
p264
sS'rv'
p265
g114
sS'expression'
p266
S'<rdkit.Chem.rdchem.Mol object>'
p267
sS'self'
p268
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p269
sS'field_type'
p270
S'<pydal.helpers.classes.SQLCustomType object>'
p271
ssg80
I962
sg81
(dp272
I960
S'                rv = op()'
p273
sI961
S'        elif field_type:'
p274
sI962
S'            rv = self.represent(expression, field_type)'
p275
sI963
S'        elif isinstance(expression, (list, tuple)):'
p276
sI964
S"            rv = ','.join(self.represent(item, field_type)"
p277
sI965
S'                          for item in expression)'
p278
sI966
S'        elif isinstance(expression, bool):'
p279
sI957
S'                    op = op[:-1]'
p280
sI958
S"                rv = '(%s)' % op"
p281
sI959
S'            else:'
p282
ssg93
S'(self=<pydal.adapters.postgres.PostgreSQLAdapter object>, expression=<rdkit.Chem.rdchem.Mol object>, field_type=<pydal.helpers.classes.SQLCustomType object>, colnames=False)'
p283
sg95
S'expand'
p284
sa(dp285
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py'
p286
sg74
(dp287
S'self'
p288
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p289
sS'BaseAdapter.represent'
p290
S'<unbound method BaseAdapter.represent>'
p291
sS'obj'
p292
S'<rdkit.Chem.rdchem.Mol object>'
p293
sS'fieldtype'
p294
S'<pydal.helpers.classes.SQLCustomType object>'
p295
sS'global BaseAdapter'
p296
S"<class 'pydal.adapters.base.BaseAdapter'>"
p297
ssg80
I351
sg81
(dp298
I352
S''
sI353
S"    def _drop(self, table, mode='restrict'):"
p299
sI354
S"        if mode not in ['restrict', 'cascade', '']:"
p300
sI355
S"            raise ValueError('Invalid mode: %s' % mode)"
p301
sI346
S"            elif field_is_type('geography'):"
p302
sI347
S'                value = "ST_GeogFromText(\'SRID=%s;%s\')" %(srid, obj)'
p303
sI348
S'#             else:'
p304
sI349
S"#                 raise SyntaxError('Invalid field type %s' %fieldtype)"
p305
sI350
S'            return value'
p306
sI351
S'        return BaseAdapter.represent(self, obj, fieldtype)'
p307
ssg93
S'(self=<pydal.adapters.postgres.PostgreSQLAdapter object>, obj=<rdkit.Chem.rdchem.Mol object>, fieldtype=<pydal.helpers.classes.SQLCustomType object>)'
p308
sg95
S'represent'
p309
sa(dp310
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py'
p311
sg74
(dp312
S'self'
p313
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p314
sS'value'
p315
S'<rdkit.Chem.rdchem.Mol object>'
p316
sS'self.adapt'
p317
S'<bound method PostgreSQLAdapter.adapt of <pydal.adapters.postgres.PostgreSQLAdapter object>>'
p318
ssg80
I1400
sg81
(dp319
I1395
S'        if isinstance(obj, CALLABLETYPES):'
p320
sI1396
S'            obj = obj()'
p321
sI1397
S'        if isinstance(fieldtype, SQLCustomType):'
p322
sI1398
S'            value = fieldtype.encoder(obj)'
p323
sI1399
S"            if value and fieldtype.type in ('string', 'text', 'json'):"
p324
sI1400
S'                return self.adapt(value)'
p325
sI1401
S"            return value or 'NULL'"
p326
sI1402
S'        if isinstance(obj, (Expression, Field)):'
p327
sI1403
S'            return str(obj)'
p328
sI1404
S"        if field_is_type('list:'):"
p329
ssg93
S'(self=<pydal.adapters.postgres.PostgreSQLAdapter object>, obj=<rdkit.Chem.rdchem.Mol object>, fieldtype=<pydal.helpers.classes.SQLCustomType object>)'
p330
sg95
g309
sa(dp331
g72
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py'
p332
sg74
(dp333
S'obj'
p334
S'<rdkit.Chem.rdchem.Mol object>'
p335
sS'global psycopg2_adapt'
p336
S'<built-in function adapt>'
p337
sS'adapted'
p338
g114
ssg80
I52
sg81
(dp339
I47
S'    def varquote(self, name):'
p340
sI48
S'        return varquote_aux(name, \'"%s"\')'
p341
sI49
S''
sI50
S'    def adapt(self, obj):'
p342
sI51
S"        if self.driver_name == 'psycopg2':"
p343
sI52
S'            adapted = psycopg2_adapt(obj)'
p344
sI53
S'            # deal with new relic Connection Wrapper (newrelic>=2.10.0.8)'
p345
sI54
S"            cxn = getattr(self.connection,'__wrapped__',self.connection)"
p346
sI55
S'            adapted.prepare(cxn)'
p347
sI56
S'            rv = adapted.getquoted()'
p348
ssg93
S'(self=<pydal.adapters.postgres.PostgreSQLAdapter object>, obj=<rdkit.Chem.rdchem.Mol object>)'
p349
sg95
S'adapt'
p350
sasS'pyver'
p351
S'Python 2.7.6: /usr/bin/python (prefix: /usr)'
p352
sS'session'
p353
g67
(S's8\x01\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">last_orderby</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_query</td><td style="vertical-align:top;">:</td><td><div>db.synonym.id&gt;0</div></td></tr></table></div>'
tRp354
sS'etype'
p355
S"<class 'psycopg2.ProgrammingError'>"
p356
sS'date'
p357
S'Wed Apr 13 16:02:08 2016'
p358
sS'response'
p359
g67
(S's\xcd\x1f\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7f3e28f1f7d8&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_naturar</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-6319cafa-3f37-42c2-81d6-b1a3eb4e77d4<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>Success!</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.natur.ar/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Home</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/naturar/default/index</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Research Groups</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/naturar/groups/list</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Compounds</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/naturar/data/compounds</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Extracts</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/naturar/data/extracts</div></td></tr><tr><td><div><table></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div>web2py, python, framework</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^compuestos/\\w+\\.py$</div></td></tr><tr><td><div>^compuestos/upload3/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_naturar</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/sessions/060/01f/127.0.0.1-6319cafa-3f37-42c2-81d6-b1a3eb4e77d4&#x27;, mode &#x27;rb+&#x27; at 0x7f3e7c579a50&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/sessions/127.0.0.1-6319cafa-3f37-42c2-81d6-b1a3eb4e77d4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>123e247d47de801c1e9a9c508fae7305</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-6319cafa-3f37-42c2-81d6-b1a3eb4e77d4</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_naturar</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>naturar</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Naturar</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>compuestos/upload3.html</div></td></tr></table></div>'
tRp360
sS'locals'
p361
(dp362
S'self'
p363
S'<pydal.adapters.postgres.PostgreSQLAdapter object>'
p364
sS'obj'
p365
S'<rdkit.Chem.rdchem.Mol object>'
p366
sssS'traceback'
p367
S'Traceback (most recent call last):\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/controllers/compuestos.py", line 433, in <module>\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturar/controllers/compuestos.py", line 415, in upload3\n    molstructure=Chem.MolFromMolFile(os.path.join(request.folder,\'static/temp/\') + form.vars.molstructure)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/objects.py", line 726, in insert\n    ret = self._db._adapter.insert(self, self._listify(fields))\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 739, in insert\n    query = self._insert(table,fields)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 167, in _insert\n    values = \',\'.join(self.expand(v, f.type) for f, v in fields)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 167, in <genexpr>\n    values = \',\'.join(self.expand(v, f.type) for f, v in fields)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 351, in represent\n    return BaseAdapter.represent(self, obj, fieldtype)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1400, in represent\n    return self.adapt(value)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 52, in adapt\n    adapted = psycopg2_adapt(obj)\nProgrammingError: can\'t adapt type \'Mol\'\n'
p368
s.