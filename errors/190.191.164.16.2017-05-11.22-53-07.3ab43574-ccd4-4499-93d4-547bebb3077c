(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'j2s'"
p3
sS'layer'
p4
S'/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturardb/controllers/compuestos.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\nfrom rdkit.Chem import AllChem\nimport os.path \n\n\ndef buscar():\n    """\n    action to show a list of compounds\n    """\n    imagewidth = 70\n    imageheight = 70\n    request.is_local =False\n    #extract of http://stackoverflow.com/questions/21447804/web2py-sqlform-grid-edit-page\n    db.compound.id.readable = True\n    db.compound.id.writeable = False\n \n\n    form = SQLFORM.grid(\n        query=db.compound,\n        formname="compound",\n\t\tcreate=False,\n        editable = auth.has_membership(\'managers\'),\n        deletable = auth.has_membership(\'managers\'),\n        buttons_placement = \'left\',\n        paginate = 5,\n        #~ searchable= dict(cansmiles=True, synonym=True, extract=False),\n        links=[dict(header=T(\'Image\'), body = lambda row: \n        DIV(A(IMG(_src=URL(\'.\',row.imagepath), \n        _width=imagewidth, _height=imageheight),_href=URL("buscar",args=["view/compound/%i"%(row.id)])),_class="img-zoom"))])\n        \n    if request.args(0):\n        if "view" in request.args(0):\n            compound_id = request.args(2)\n            # Properties selection\n            table = db(db.compoundproperty.compound_id==compound_id).select(\n                db.compoundproperty.molecularweight,\n                db.compoundproperty.molecularformula,\n                #~ db.compoundproperty.molecular_volume,\n                db.compoundproperty.logp,\n                db.compoundproperty.tpsa,\n                db.compoundproperty.hbd,\n                db.compoundproperty.hba,\n                db.compoundproperty.numrotatable,\n                db.compoundproperty.numring,\n                #~ db.compoundproperty.num_n,\n                #~ db.compoundproperty.num_o,\n                #~ db.compoundproperty.num_s,\n                db.compoundproperty.numro5violation,\n            )        \n            properties = rows_transpose(table)\n            \n            # Docs selection\n\n            docs_id = db(db.compound_doc.compound_id==compound_id).select(db.compound_doc.doc_id).as_list()\n            print docs_id\n            if docs_id!=[]:\n                doclst = []\n                for doc in docs_id:\n                    table = db(db.doc.id==doc[\'doc_id\']).select(\n                        db.doc.journal,\n                        db.doc.year,\n                        db.doc.volume,\n                        db.doc.issue,\n                        db.doc.firstpage,\n                        db.doc.lastpage,\n                        db.doc.doi,\n                        db.doc.isbn10,\n                        db.doc.issn,\n                        db.doc.pubmed_id,\n                        db.doc.title,\n                        db.doc.doctype,\n                        db.doc.authors,\n                        db.doc.abstract,\n                        db.doc.url,\n                        )\n                    doclst.append(table.first())\n                    print doclst\n                    \n            else:\n                doclst = None\n\n    else:\n        properties = ""\n        doclst = None\n    \n    \n    #~ print doi2doc("10.1016/j.molstruc.2014.10.054")[\'message\'][\'author\']\n   \n    return dict(form=form, properties=properties, docs=doclst)\n    \n\n\nresponse._vars=response._caller(buscar)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturardb/controllers/compuestos.py", line 103, in <module>\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/applications/naturardb/controllers/compuestos.py", line 58, in buscar\n    db.compoundproperty.numro5violation,\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1283, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1170, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 952, in expand\n    rv = op(first, second, **optional_args)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 846, in EQ\n    self.expand(second, first.type))\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 962, in expand\n    rv = self.represent(expression, field_type)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 351, in represent\n    return BaseAdapter.represent(self, obj, fieldtype)\n  File "/home/mjl/Dropbox/FITOMEDICINA/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1442, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'j2s\'\n'
p11
s.