(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 151, in __init__\n    self.reconnect()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/connection.py", line 105, in reconnect\n    self.connection = f()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 148, in connector\n    return self.driver.connect(**driver_args)\n  File "/usr/local/lib/python2.7/dist-packages/psycopg2/__init__.py", line 164, in connect\n    conn = _connect(dsn, connection_factory=connection_factory, async=async)\nOperationalError: FATAL:  database "naturardb" does not exist\n\n'
p3
sS'layer'
p4
S'/home/www-data/web2py/applications/naturar/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\n\n\n#~ if not request.env.web2py_runtime_gae:\n    #~ ## if NOT running on Google App Engine use SQLite or other DB\n    #~ db = DAL(myconf.take(\'db.uri\'), pool_size=myconf.take(\'db.pool_size\', cast=int), check_reserved=[\'all\'])\n#~ else:\n    #~ ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    #~ db = DAL(\'google:datastore+ndb\')\n    #~ ## store sessions and tickets there\n    #~ session.connect(request, response, db=db)\n    #~ ## or store session in Memcache, Redis, etc.\n    #~ ## from gluon.contrib.memdb import MEMDB\n    #~ ## from google.appengine.api.memcache import Client\n    #~ ## session.connect(request, response, db = MEMDB(Client()))\n    \ndb = DAL("postgres://fito:123456@localhost/naturardb")\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.take(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.take(\'forms.separator\')\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db)\nservice = Service()\nplugins = PluginManager()\n\n## extra fields (mjl)\nauth.settings.extra_fields[\'auth_user\']= [\n  Field(\'address\', label=T(\'Address\')),\n  Field(\'city\', label=T(\'City\')),\n  Field(\'zip\', label=T(\'Zip\')),\n  Field(\'phone\', label=T(\'Phone\'))]\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False, fake_migrate=True) \n\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' if request.is_local else myconf.take(\'smtp.server\')\nmail.settings.sender = myconf.take(\'smtp.sender\')\nmail.settings.login = myconf.take(\'smtp.login\')\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n#settings\n#~ settings.max_size # get the value\n#~ settings.update_record(summary=new_summary) # set a value \ndb.define_table(\'settings\', \n\n    Field(\'imagedir\', default="applications/naturar/images_molecule/"),\n    #~ Field(\'max_size\', \'integer\', default=10),\n    #~ Field(\'summary\', \'text\', \'abc\'),\n    fake_migrate=True\n)\n# create an instance of settings table\nsettings = db(db.settings.id > 0).select().first()\nif not settings:\n    settings = db.settings.insert()\n    \n    \n# SOURCE INFORMATION\ndb.define_table(\'source\', \n    auth.signature,\n    Field(\'source\'),\n    Field(\'native_name\'),\n    Field(\'common_name\'),\n    Field(\'source_kingdom\'),\n    Field(\'source_family\'),\n    Field(\'source_genus\'),\n    Field(\'source_species\'),\n    Field(\'origin\'),\n    Field(\'geographical_origin\'),\n    Field(\'image\'),\n    fake_migrate=True\n\n    )\n        \n\n# DOCS\ndb.define_table(\'doc\', \n    auth.signature,\n    Field(\'journal\'),\n    Field(\'year\'),\n    Field(\'volume\'),\n    Field(\'issue\'),\n    Field(\'first_page\'),\n    Field(\'last_page\'),\n    Field(\'doi\'),\n    Field(\'pubmed_id\'),\n    Field(\'title\'),\n    Field(\'doc_type\'),\n    Field(\'authors\'),\n    Field(\'abstract\'),\n    fake_migrate=True\n\n    )\n        \n#MOLECULE SYNONYMS\ndb.define_table(\'molecule_synonym\',\n    auth.signature,\n    Field(\'synonym\'),\n    Field(\'molecule_synonym\'),\n    fake_migrate=True\n\n    )    \n\n# RESEARCH GROUPS\ndb.define_table(\'research_group\',\n    auth.signature,\n    Field(\'name\'),\n    Field(\'members\'),\n    Field(\'institution\'),\n    Field(\'webpage\'),\n    Field(\'email\'),\n    Field(\'telephone\'),\n    Field(\'address\'),\n    Field(\'city\'),\n    Field(\'country\', default="Argentina"),\n    fake_migrate=True\n    )\n  \n# EXTRACTS\ndb.define_table(\'extract_record\', \n    auth.signature,\n    Field(\'extract_name\', requires=IS_NOT_EMPTY()),\n    Field(\'source_id\', \'reference source\'),\n    Field(\'part_used\'),\n    Field(\'created_on\', \'datetime\', default=request.now,readable=False, writable=False),\n    Field(\'created_by\', \'reference auth_user\', default=auth.user_id,readable=False, writable=False),\n    format=\'%(extract_name)s\',\n    fake_migrate=True\n    )\n\n# COMPOUNDS\ndb.define_table(\'compound_record\', \n    auth.signature,\n    Field(\'name\', requires=IS_NOT_EMPTY()),\n    Field(\'molsource\', requires=IS_NOT_EMPTY()),\n    Field(\'created_on\', \'datetime\', default=request.now,readable=False, writable=False),\n    Field(\'created_by\', \'reference auth_user\', default=auth.user_id,readable=False, writable=False),\n    Field(\'smiles\'),\n    Field(\'extract\', \'reference extract_record\'), \n    Field(\'imagepath\', \'text\',readable=False, writable=False),\n    Field(\'docs\', \'list:reference doc\'),\n    Field(\'synonym\', \'list:reference synonym\'),\n    format=\'%(id)i-%(name)s\',\n    fake_migrate=True\n\n    )\n\n# define autocomplete function for extracto\ndb.compound_record.extract.widget = SQLFORM.widgets.autocomplete(\n     request, db.extract_record.extract_name, id_field=db.extract_record.id, limitby=(0,10), min_length=2)\n\n\n#COMPOUND PROPERTIES\ndb.define_table(\'compound_property\', \n    auth.signature,\n    Field(\'compound_record_id\', \'reference compound_record\'),\n    Field(\'molecular_weight\'),\n    Field(\'molecular_formula\'),\n    Field(\'molecular_volume\', label="volumen"),\n    Field(\'smiles\'),\n    Field(\'clogp\'),\n    Field(\'xlogp\'),\n    Field(\'tpsa\'),\n    Field(\'hbd\'),\n    Field(\'hba\'),\n    Field(\'num_rotatables_bonds\'),\n    Field(\'aromatic_rings\'),\n    Field(\'num_n\'),\n    Field(\'num_o\'),\n    Field(\'num_s\'),\n    Field(\'num_ro5_violations\'),\n    fake_migrate=True\n    )\n\n\n\n\n\n\n\n\n## after defining tables, uncomment below to enable auditing\n#~ auth.enable_record_versioning(db)\n\n\n\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/www-data/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/www-data/web2py/applications/naturar/models/db.py", line 32, in <module>\n    db = DAL("postgres://fito:123456@localhost/naturardb")\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 459, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/base.py", line 437, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/base.py", line 57, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 151, in __init__\n    self.reconnect()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/connection.py", line 105, in reconnect\n    self.connection = f()\n  File "/home/www-data/web2py/gluon/packages/dal/pydal/adapters/postgres.py", line 148, in connector\n    return self.driver.connect(**driver_args)\n  File "/usr/local/lib/python2.7/dist-packages/psycopg2/__init__.py", line 164, in connect\n    conn = _connect(dsn, connection_factory=connection_factory, async=async)\nOperationalError: FATAL:  database "naturardb" does not exist\n\n\n'
p11
s.